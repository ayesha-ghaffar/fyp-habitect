
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Add for auth state listener
import 'package:provider/provider.dart'; // <<< ADD THIS
import 'firebase_options.dart'; // Generated by Firebase CLI

// Services
import 'package:fyp/services/user_service.dart'; // <<< ADD THIS
import 'package:fyp/services/chat_service.dart'; // <<< ADD THIS
import 'package:fyp/services/call_service.dart'; // <<< ADD THIS

// Screens
import 'views/authentication_screens/splash_screen.dart';
import 'views/authentication_screens/login_screen.dart';
import 'views/authentication_screens/register_screen.dart';
import 'views/authentication_screens/reset_password_screen.dart';
import 'views/client_screens/client_dashboard_screen.dart';
import 'views/client_screens/architects_screen.dart';
import 'views/architect_screens/project_management_screen.dart';
import 'views/client_screens/profile_screen.dart';
import 'views/client_screens/search_architects_screen.dart';
import 'views/client_screens/post_project_screen.dart';
import 'views/architect_screens/architect_dashboard_screen.dart';
import 'views/client_screens/chat_list_screen.dart';
import 'views/client_screens/uploaded_projects_screen.dart';
import 'services/portfolio_viewmodel.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  print('Initializing Firebase...');
  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    print('Firebase initialized successfully.');
  } catch (e) {
    print('Error initializing Firebase: $e');
    // Consider adding a graceful error display or retry mechanism here
  }

  // Run the app, providing the services using MultiProvider
  runApp(
    MultiProvider(
      providers: [
        Provider<UserService>(
          create: (_) => UserService(),
        ),
        Provider<ChatService>(
          create: (_) => ChatService(),
        ),
        Provider<CallService>(
          create: (_) => CallService(),
          // Ensure Agora engine is disposed when the app is closed
          dispose: (context, callService) => callService.dispose(),
        ),
        Provider<PortfolioViewModel>(
          create: (_) => PortfolioViewModel(),
        ),
      ],
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> with WidgetsBindingObserver { // Added WidgetsBindingObserver
  final FirebaseAuth _auth = FirebaseAuth.instance;
  // This will store the current user model fetched from UserService
  // Make sure this is accessible for your UI, e.g., in a state manager or similar
  // For now, we'll just use it for online status.

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this); // Register observer
    _setupFirebaseAuthListener(); // Set up auth state listener
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this); // Unregister observer
    super.dispose();
  }

  // Handle app lifecycle changes (e.g., app goes to background/foreground)
  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    final userService = Provider.of<UserService>(context, listen: false);
    final currentUser = _auth.currentUser;

    if (currentUser == null) return; // Only update if user is logged in

    if (state == AppLifecycleState.resumed) {
      // App is in foreground, set user online
      print('App resumed. Setting user online.');
      userService.updateOnlineStatus(true);
    } else if (state == AppLifecycleState.inactive || state == AppLifecycleState.paused || state == AppLifecycleState.detached) {
      // App is in background or terminated, set user offline
      print('App going to background. Setting user offline.');
      userService.updateOnlineStatus(false);
    }
  }

  void _setupFirebaseAuthListener() {
    _auth.authStateChanges().listen((User? user) async {
      final userService = Provider.of<UserService>(context, listen: false);

      if (user != null) {
        print('User ${user.uid} is signed in. Setting online status...');
        await userService.updateOnlineStatus(true);
      } else {
        print('User is signed out. Setting offline status...');
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'HabiTect',
      theme: ThemeData(
        appBarTheme: const AppBarTheme(
          color: Colors.white,
          elevation: 0,
        ),
        colorScheme: ColorScheme.light(
          primary: const Color(0xFF6B8E23),
          secondary: const Color(0xFFE2725B),
          secondaryFixed: const Color(0xFFBDC6C2),
          tertiary: const Color(0xFFDCB287),
          tertiaryFixed: const Color(0xFF9E897B),
          tertiaryFixedDim: const Color(0xFFB5855B),
          surface: Colors.white,
          background: const Color(0xFFF9F9F7),
        ),
        fontFamily: 'Georama',
        useMaterial3: true,
        textTheme: const TextTheme(
          headlineLarge: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.w600,
            color: Colors.black87,
          ),
          bodyLarge: TextStyle(
            fontSize: 14,
            color: Colors.black54,
          ),
          labelLarge: TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.w500,
          ),
        ),
      ),
      initialRoute: '/',
      routes: {
        '/': (context) => SplashScreen(),
        '/login': (context) => LoginScreen(),
        '/register': (context) => RegisterScreen(),
        '/reset-password': (context) => const ResetPasswordScreen(),
        '/client-dashboard': (context) => ClientDashboard(),
        '/architects': (context) => const ArchitectsScreen(),
        '/projects': (context) => const ProjectsScreen(),
        '/profile': (context) => const ProfileScreen(),
        '/search-architects': (context) => const SearchArchitects(),
        '/post-project': (context) => const PostProject(),
        '/architect-dashboard': (context) => ArchitectDashboard(),
        '/chatListScreen':(context) => ChatListScreen(),
        '/uploaded-projects':(context) => UploadedProjectsScreen(),
      },
    );
  }
}